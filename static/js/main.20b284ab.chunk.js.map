{"version":3,"sources":["serviceWorker.js","components/Cards.js","components/CardList.js","data/robots.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Cards","props","name","email","id","className","alt","src","CardList","robots","map","item","index","key","SearchBox","type","placeholder","onChange","searchChange","Scroll","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","App","useState","robot","setRobot","searchField","setSearchField","useEffect","fetch","then","response","json","user","filteredRobot","filter","toLowerCase","includes","length","event","target","value","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"qQAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,iBCFSC,G,MAbD,SAACC,GAAW,IACdC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,MAAOC,EAAOH,EAAPG,GACrB,OACI,kBAAC,WAAD,KACI,yBAAKC,UAAU,oDACf,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBACrB,2BAAIF,GACJ,2BAAIC,OCgBDK,EAvBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAGhB,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,kBAAC,EAAD,CACIV,KAAMO,EAAOG,GAAOV,KACpBE,GAAIK,EAAOG,GAAOR,GAClBD,MAAOM,EAAOG,GAAOT,MACrBU,IAAKD,SCfpBH,EAAS,CAClB,CACIP,KAAM,gBACNE,GAAI,EACJD,MAAO,0BAEX,CACID,KAAM,aACNE,GAAI,EACJD,MAAO,uBAEX,CACID,KAAM,2BACNE,GAAI,EACJD,MAAO,mCAEX,CACID,KAAM,sBACNE,GAAI,EACJD,MAAO,6BAEX,CACID,KAAM,sCACNE,GAAI,EACJD,MAAO,2BAEX,CACID,KAAM,+BACNE,GAAI,EACJD,MAAO,uCCfAW,EAZG,SAACb,GACf,OACI,yBAAKI,UAAU,OACX,2BAAOA,UAAU,mCACbU,KAAK,SACLC,YAAY,gBACZC,SAAYhB,EAAMiB,iBCInBC,G,MATA,SAAClB,GAEZ,OACI,yBAAKmB,MAAO,CAACC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAC/DtB,EAAMuB,Y,4BCsBJC,E,kDAzBd,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,UAAW,GAHL,E,8DAQIC,EAAOC,GACtBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAKpB,OAAIG,KAAKJ,MAAMC,SACJ,wDAGAG,KAAK7B,MAAMuB,a,GAnBHQ,IAAMC,WCwCnBC,EAlCH,WAAO,IAAD,EACUC,mBAAS1B,GADnB,mBACT2B,EADS,KACFC,EADE,OAEsBF,mBAAS,IAF/B,mBAETG,EAFS,KAEIC,EAFJ,KAQhBC,qBAAU,WAERC,MAAM,6CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIR,EAASQ,SAG3B,IAAMC,EAAgBV,EAAMW,QAAO,SAAApC,GACjC,OAAOA,EAAKT,KAAK8C,cAAcC,SAASX,EAAYU,kBAGtD,OAAQZ,EAAMc,OACX,yBAAK7C,UAAU,MACd,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWa,aAlBQ,SAACiC,GACtBZ,EAAeY,EAAMC,OAAOC,UAkB1B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU5C,OAAQqC,OAND,wBAAIzC,UAAU,MAAd,YCtBzBiD,IAASC,OACR,kBAAC,EAAD,MACGC,SAASC,eAAe,SR2HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLoC,QAAQpC,MAAMA,EAAMqC,c","file":"static/js/main.20b284ab.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Fragment } from 'react'\r\nimport './Cards.css'\r\n\r\nconst Cards = (props) => {\r\n    const { name, email, id } = props;\r\n    return (\r\n        <Fragment >\r\n            <div className='bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?size=200x200`}></img>\r\n            <p>{name}</p>\r\n            <p>{email}</p>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Cards","import React from 'react'\r\nimport Cards from './Cards'\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((item, index) => {\r\n                    return (\r\n                        <Cards\r\n                            name={robots[index].name}\r\n                            id={robots[index].id}\r\n                            email={robots[index].email}\r\n                            key={index}\r\n                        />\r\n                    )\r\n                })\r\n\r\n            }\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default CardList\r\n","export const robots = [\r\n    {\r\n        name: 'Optimus Prime',\r\n        id: 1,\r\n        email: 'optimusprime@gmail.com'\r\n    },\r\n    {\r\n        name: 'Bumble Bee',\r\n        id: 2,\r\n        email: 'bumblebee@gmail.com'\r\n    },\r\n    {\r\n        name: 'da Vinci Surgical System',\r\n        id: 3,\r\n        email: 'daVinciSurgicalSystem@gmail.com'\r\n    },\r\n    {\r\n        name: 'KITT (Knight Rider)',\r\n        id: 4,\r\n        email: 'kittknightrider@gmail.com'\r\n    },\r\n    {\r\n        name: 'The Tachikomas (Ghost in the Shell)',\r\n        id: 5,\r\n        email: 'thetachikomas@gmail.com'\r\n    },\r\n    {\r\n        name: 'Toyota violin-playing robot.',\r\n        id: 6,\r\n        email: 'toyotaviolinplayingrobot@gmail.com'\r\n    },\r\n]","import React from 'react'\r\n\r\nconst SearchBox = (props) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input className='pa3 ba b--green bg-lightest-blue'\r\n                type='search'\r\n                placeholder='Search Robots'\r\n                onChange = {props.searchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox","import React from 'react'\r\n\r\n\r\nconst Scroll = (props) => {\r\n  \r\n    return (\r\n        <div style={{overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll ","import React from 'react'\r\n\r\n\r\nclass ErrorBoundary extends React.Component {\r\n constructor() {\r\n     super()\r\n     this.state = {\r\n         hasError : false\r\n     }\r\n }\r\n\r\n\r\ncomponentDidCatch (error, info) {\r\n    this.setState({hasError: true})\r\n}\r\n\r\n render() {\r\n     \r\n         if (this.state.hasError) {\r\n             return <h1>Ooops. This is not good.</h1>\r\n         } \r\n         else {\r\n             return this.props.children\r\n         } \r\n     \r\n } \r\n\r\n}\r\n\r\nexport default ErrorBoundary","import React, { useState, useEffect } from 'react'\r\nimport CardList from '../components/CardList'\r\nimport { robots } from '../data/robots'\r\nimport SearchBox from '../components/SearchBox'\r\nimport './App.css'\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\n\r\n\r\nconst App = () => {\r\n  const [robot, setRobot] = useState(robots)\r\n  const [searchField, setSearchField] = useState('')\r\n\r\n  const onSearchChange = (event) => {\r\n    setSearchField(event.target.value)\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n    fetch('http://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(user => setRobot(user))\r\n  })\r\n\r\n  const filteredRobot = robot.filter(item => {\r\n    return item.name.toLowerCase().includes(searchField.toLowerCase())\r\n  })\r\n\r\n  return !robot.length ? <h1 className='tc'>Loading</h1> :\r\n    (<div className='tc'>\r\n      <h1 className='f1'>Robo Friends</h1>\r\n      <SearchBox searchChange={onSearchChange} />\r\n      <Scroll>\r\n        <ErrorBoundary>\r\n        <CardList robots={filteredRobot} />\r\n        </ErrorBoundary>\r\n      </Scroll>\r\n    </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default App ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\nimport App from './containers/App'\nReactDOM.render(\n <App/>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}